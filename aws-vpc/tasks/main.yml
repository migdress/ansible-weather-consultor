---
# tasks file for aws-vpc
 - name: create VPC
   ec2_vpc_net:
       name: "{{ vpc_name }}"
       cidr_block: "{{ vpc_cidr }}"
       region: "{{ region }}"
       state: present
       aws_access_key: "{{ aws_access_key }}"
       aws_secret_key: "{{ aws_secret_key }}"
   register: vpc

 - name: associate subnet to the VPC
   ec2_vpc_subnet:
       state: present
       vpc_id: "{{ vpc.vpc.id }}"
       region: "{{ region }}"
       cidr: "{{ subnet_cidr }}"
       aws_access_key: "{{ aws_access_key }}"
       aws_secret_key: "{{ aws_secret_key }}"
       map_public: yes
       resource_tags:
           Name: "{{ subnet_name }}"
   register: subnet

 - name: create IGW
   ec2_vpc_igw:  
       vpc_id: "{{ vpc.vpc.id }}"
       region: "{{ region }}"
       aws_access_key: "{{ aws_access_key }}"
       aws_secret_key: "{{ aws_secret_key }}"
       state: "present"
       tags:
           Name: "{{ igw_name }}"
   register: igw

 - name: Route IGW
   ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      region: "{{ region }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      subnets:
          - "{{ subnet.subnet.id }}"
      routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
      tags:
          Name: "{{ route_name }}"

 # update CIDR address in the SSH port section
 - name: Create security group
   ec2_group:
       name: Web DMZ
       description: DMZ Security Group
       vpc_id: "{{ vpc.vpc.id }}"
       region: "{{ region }}"
       aws_access_key: "{{ aws_access_key }}"
       aws_secret_key: "{{ aws_secret_key }}"
       rules:
           - proto: tcp
             ports: 
             - 80
             cidr_ip: 0.0.0.0/0
           - proto: tcp
             ports: 
             - 22 
             cidr_ip: 0.0.0.0/0
   register: security_group

 - name: Create a new ec2 key pair
   ec2_key: 
       aws_access_key: "{{ aws_access_key }}"
       aws_secret_key: "{{ aws_secret_key }}"
       name: ec2_keypair
       region: "{{ region }}"
   register: keypair

 - debug:
     var: keypair
     #verbosity: 2

 - name: Copy ec2 private key locally so it can be later on used to ssh into the instance
   copy: content="{{ keypair.key.private_key }}" dest={{ ec2_key_directory }}key.ppk
   when: keypair.changed == true

 - name: Give right permissions to key file
   file:
       path: "{{ ec2_key_directory }}key.ppk"
       mode: "0400"

 - name: Create ec2 instance
   ec2: 
       image: ami-024a64a6685d05041 #ubuntu 18.04
       wait: yes
       instance_type: t2.micro
       region: "{{ region }}"
       group_id: "{{ security_group.group_id }}"
       vpc_subnet_id: "{{ subnet.subnet.id }}"
       key_name: "{{ keypair.key.name }}"
       instance_tags:
           Name: nginx
       count_tag: 
           Name: nginx
       exact_count: 1
       aws_access_key: "{{ aws_access_key }}"
       aws_secret_key: "{{ aws_secret_key }}"
   register: ec2_instance

 - debug:
       var: ec2_instance

 - name: Wait for ssh to come up
   wait_for: host={{item.public_ip}} port=22 delay=60 timeout=320 state=started
   loop: "{{ec2_instance.instances}}"


 - name: Append new host line to hosts file
   lineinfile:
       path: hosts
       regexp: 'ec2_1'
       line: "ec2_1 ansible_host={{item.public_ip}} ansible_ssh_user=ubuntu ansible_ssh_private_key_file={{ec2_key_directory}}key.ppk ansible_python_interpreter=/usr/bin/python3"
   loop: "{{ec2_instance.instances}}"
 
 - name: Add created instance to host group
   add_host: 
       name: "{{ item.public_ip }}"
       groups: "ec2"
       ansible_ssh_user: ubuntu 
       ansible_ssh_private_key_file: "{{ec2_key_directory}}key.ppk"
       ansible_python_interpreter: "/usr/bin/python3"
   loop: "{{ec2_instance.instances}}"
   register: added_hosts


 - debug:
       var: added_hosts
      
